apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "machine-deletion-remediation.medik8s.io/v1alpha1",
          "kind": "MachineDeletionRemediation",
          "metadata": {
            "name": "machinedeletionremediation-sample"
          },
          "spec": {},
          "status": {
            "conditions": [
              {
                "reason": "RemediationFinished",
                "status": false,
                "type": "Processing"
              },
              {
                "reason": "RemediationFinished",
                "status": true,
                "type": "Succeeded"
              },
              {
                "reason": "MachineDeletionOnBareMetalProviderReason",
                "status": false,
                "type": "PermanentNodeDeletionExpected"
              }
            ]
          }
        },
        {
          "apiVersion": "machine-deletion-remediation.medik8s.io/v1alpha1",
          "kind": "MachineDeletionRemediationTemplate",
          "metadata": {
            "name": "machinedeletionremediationtemplate-sample"
          },
          "spec": {
            "template": {
              "spec": {}
            }
          }
        }
      ]
    capabilities: Basic Install
    categories: OpenShift Optional
    containerImage: ""
    createdAt: ""
    description: Machine Deletion Remediation operator for reprovisioning unhealthy
      nodes using the Machine API.
    olm.skipRange: '>=0.0.1'
    operatorframework.io/suggested-namespace: openshift-workload-availability
    operatorframework.io/suggested-namespace-template: '{"kind":"Namespace","apiVersion":"v1","metadata":{"name":"openshift-workload-availability","annotations":{"openshift.io/node-selector":""}}}'
    operators.operatorframework.io/builder: operator-sdk-v1.32.0
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
    repository: https://github.com/medik8s/machine-deletion-remediation
    support: Medik8s
  name: machine-deletion-remediation.v0.0.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: MachineDeletionRemediation is the Schema for the machinedeletionremediations
        API
      displayName: Machine Deletion Remediation
      kind: MachineDeletionRemediation
      name: machinedeletionremediations.machine-deletion-remediation.medik8s.io
      resources:
      - kind: MachineDeletionRemediation
        name: machinedeletionremediations
        version: v1alpha1
      statusDescriptors:
      - description: 'Represents the observations of a MachineDeletionRemediation''s
          current state. Known .status.conditions.type are: "Processing", "Succeeded"
          and "PermanentNodeDeletionExpected"'
        displayName: conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1alpha1
    - description: MachineDeletionRemediationTemplate is the Schema for the machinedeletionremediationtemplates
        API
      displayName: Machine Deletion Remediation Template
      kind: MachineDeletionRemediationTemplate
      name: machinedeletionremediationtemplates.machine-deletion-remediation.medik8s.io
      resources:
      - kind: MachineDeletionRemediationTemplate
        name: machinedeletionremediationtemplates
        version: v1alpha1
      specDescriptors:
      - displayName: Template
        path: template
      version: v1alpha1
  description: |
    Machine Deletion Remediation (MDR) is a remediator designed to reprovision unhealthy
    nodes using the Machine API. MDR can be used together with NodeHealthCheck (NHC),
    which detects the unhealthy Node and creates the Custom Resource for MDR.

    # How it works
    MDR follows the annotation on the Node to the associated Machine object, confirms
    that it has an owning controller (e.g. MachineSetController), that will recreate the
    Machine once deleted, and then proceeds with deleting the Machine.

    # How to use MDR with NHC
    To use MDR as remediation mechanism for NHC, it needs to be configured with the
    following steps:

    - Create the MDR Template CR
    - Modify NHC's `.spec.remediationTemplate` to use MDR as it's remediator

    see https://github.com/medik8s/machine-deletion-remediation#readme for configuration examples.
  displayName: Machine Deletion Remediation operator
  icon:
  - base64data: base64EncodedIcon
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - nodes
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - machine-deletion-remediation.medik8s.io
          resources:
          - machinedeletionremediations
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - machine-deletion-remediation.medik8s.io
          resources:
          - machinedeletionremediations/finalizers
          verbs:
          - update
        - apiGroups:
          - machine-deletion-remediation.medik8s.io
          resources:
          - machinedeletionremediations/status
          verbs:
          - get
          - patch
          - update
        - apiGroups:
          - machine.openshift.io
          resources:
          - controlplanemachinesets
          - machinesets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - machine.openshift.io
          resources:
          - machines
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: machine-deletion-remediation-controller-manager
      deployments:
      - label:
          control-plane: controller-manager
        name: machine-deletion-remediation-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --http2-disable
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: quay.io/brancz/kube-rbac-proxy:v0.15.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                resources: {}
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                command:
                - /manager
                image: quay.io/medik8s/machine-deletion-remediation-operator:latest
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 100m
                    memory: 30Mi
                  requests:
                    cpu: 100m
                    memory: 20Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: machine-deletion-remediation-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: machine-deletion-remediation-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - medik8s
  - machine
  - deletion
  - remediation
  - mdr
  links:
  - name: Machine Deletion Remediation
    url: https://medik8s.io
  - name: Source Code
    url: https://github.com/medik8s/machine-deletion-remediation
  maintainers:
  - email: medik8s@googlegroups.com
    name: Medik8s Team
  maturity: alpha
  minKubeVersion: 1.23.0
  provider:
    name: Medik8s
    url: https://github.com/medik8s
  replaces: machine-deletion-remediation.v0.0.1
  version: 0.0.1
